SIGNAL(2)                             Linux Programmer's Manual                             SIGNAL(2)

NNAAMMEE
       signal - ANSI C signal handling

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssiiggnnaall..hh>>

       ttyyppeeddeeff vvooiidd ((**ssiigghhaannddlleerr__tt))((iinntt));;

       ssiigghhaannddlleerr__tt ssiiggnnaall((iinntt _s_i_g_n_u_m,, ssiigghhaannddlleerr__tt _h_a_n_d_l_e_r));;

DDEESSCCRRIIPPTTIIOONN
       The  behavior of ssiiggnnaall() varies across UNIX versions, and has also varied historically across
       different versions of Linux.  AAvvooiidd iittss uussee: use ssiiggaaccttiioonn(2) instead.  See _P_o_r_t_a_b_i_l_i_t_y below.

       ssiiggnnaall() sets the disposition of the signal  _s_i_g_n_u_m  to  _h_a_n_d_l_e_r,  which  is  either  SSIIGG__IIGGNN,
       SSIIGG__DDFFLL, or the address of a programmer-defined function (a "signal handler").

       If the signal _s_i_g_n_u_m is delivered to the process, then one of the following happens:

       *  If the disposition is set to SSIIGG__IIGGNN, then the signal is ignored.

       *  If  the  disposition  is set to SSIIGG__DDFFLL, then the default action associated with the signal
          (see ssiiggnnaall(7)) occurs.

       *  If the disposition is set to a function, then first either  the  disposition  is  reset  to
          SSIIGG__DDFFLL,  or the signal is blocked (see _P_o_r_t_a_b_i_l_i_t_y below), and then _h_a_n_d_l_e_r is called with
          argument _s_i_g_n_u_m.  If invocation of the handler caused the signal to be  blocked,  then  the
          signal is unblocked upon return from the handler.

       The signals SSIIGGKKIILLLL and SSIIGGSSTTOOPP cannot be caught or ignored.

RREETTUURRNN VVAALLUUEE
       ssiiggnnaall()  returns the previous value of the signal handler, or SSIIGG__EERRRR on error.  In the event
       of an error, _e_r_r_n_o is set to indicate the cause.

EERRRROORRSS
       EEIINNVVAALL _s_i_g_n_u_m is invalid.

CCOONNFFOORRMMIINNGG TTOO
       POSIX.1-2001, POSIX.1-2008, C89, C99.

NNOOTTEESS
       The effects of ssiiggnnaall() in a multithreaded process are unspecified.

       According to POSIX, the behavior of a process is undefined after it ignores a SSIIGGFFPPEE,  SSIIGGIILLLL,
       or SSIIGGSSEEGGVV signal that was not generated by kkiillll(2) or rraaiissee(3).  Integer division by zero has
       undefined result.  On some architectures it will generate a SSIIGGFFPPEE signal.  (Also dividing the
       most  negative integer by -1 may generate SSIIGGFFPPEE.)  Ignoring this signal might lead to an end‐
       less loop.

       See ssiiggaaccttiioonn(2) for details on what happens when the disposition SSIIGGCCHHLLDD is set to SSIIGG__IIGGNN.

       See ssiiggnnaall--ssaaffeettyy(7) for a list of the async-signal-safe functions that can be  safely  called
       from inside a signal handler.

       The  use of _s_i_g_h_a_n_d_l_e_r___t is a GNU extension, exposed if __GGNNUU__SSOOUURRCCEE is defined; glibc also de‐
       fines (the BSD-derived) _s_i_g___t if __BBSSDD__SSOOUURRCCEE  (glibc  2.19  and  earlier)  or  __DDEEFFAAUULLTT__SSOOUURRCCEE
       (glibc 2.19 and later) is defined.  Without use of such a type, the declaration of ssiiggnnaall() is
       the somewhat harder to read:

           vvooiidd (( **_s_i_g_n_a_l((iinntt _s_i_g_n_u_m,, vvooiidd ((**_h_a_n_d_l_e_r))((iinntt)))) )) ((iinntt));;

   PPoorrttaabbiilliittyy
       The only portable use of ssiiggnnaall() is to set a signal's disposition to SSIIGG__DDFFLL or SSIIGG__IIGGNN.  The
       semantics  when  using ssiiggnnaall() to establish a signal handler vary across systems (and POSIX.1
       explicitly permits this variation); ddoo nnoott uussee iitt ffoorr tthhiiss ppuurrppoossee..

       POSIX.1 solved the portability mess by specifying ssiiggaaccttiioonn(2), which provides  explicit  con‐
       trol  of  the  semantics  when a signal handler is invoked; use that interface instead of ssiigg‐‐
       nnaall().

       In the original UNIX systems, when a handler that was established using ssiiggnnaall()  was  invoked
       by  the delivery of a signal, the disposition of the signal would be reset to SSIIGG__DDFFLL, and the
       system did not block delivery of further instances of the signal.  This is equivalent to call‐
       ing ssiiggaaccttiioonn(2) with the following flags:

           sa.sa_flags = SA_RESETHAND | SA_NODEFER;

       System V also provides these semantics for ssiiggnnaall().  This was bad because the signal might be
       delivered again before the handler had a chance to reestablish itself.  Furthermore, rapid de‐
       liveries of the same signal could result in recursive invocations of the handler.

       BSD  improved  on this situation, but unfortunately also changed the semantics of the existing
       ssiiggnnaall() interface while doing so.  On BSD, when a signal handler is invoked, the signal  dis‐
       position  is  not  reset, and further instances of the signal are blocked from being delivered
       while the handler is executing.  Furthermore, certain blocking system calls are  automatically
       restarted  if  interrupted by a signal handler (see ssiiggnnaall(7)).  The BSD semantics are equiva‐
       lent to calling ssiiggaaccttiioonn(2) with the following flags:

           sa.sa_flags = SA_RESTART;

       The situation on Linux is as follows:

       * The kernel's ssiiggnnaall() system call provides System V semantics.

       * By default, in glibc 2 and later, the ssiiggnnaall() wrapper function does not invoke  the  kernel
         system  call.   Instead,  it calls ssiiggaaccttiioonn(2) using flags that supply BSD semantics.  This
         default behavior is  provided  as  long  as  a  suitable  feature  test  macro  is  defined:
         __BBSSDD__SSOOUURRCCEE  on  glibc 2.19 and earlier or __DDEEFFAAUULLTT__SSOOUURRCCEE in glibc 2.19 and later.  (By de‐
         fault, these macros are defined; see ffeeaattuurree__tteesstt__mmaaccrrooss(7) for details.)  If such a feature
         test macro is not defined, then ssiiggnnaall() provides System V semantics.

SSEEEE AALLSSOO
       kkiillll(1),  aallaarrmm(2),  kkiillll(2),  ppaauussee(2),  ssiiggaaccttiioonn(2),  ssiiggnnaallffdd(2),  ssiiggppeennddiinngg(2), ssiiggpprroocc‐‐
       mmaasskk(2), ssiiggssuussppeenndd(2),  bbssdd__ssiiggnnaall(3),  kkiillllppgg(3),  rraaiissee(3),  ssiiggiinntteerrrruupptt(3),  ssiiggqquueeuuee(3),
       ssiiggsseettooppss(3), ssiiggvveecc(3), ssyyssvv__ssiiggnnaall(3), ssiiggnnaall(7)

CCOOLLOOPPHHOONN
       This  page  is  part  of  release  5.05  of the Linux _m_a_n_-_p_a_g_e_s project.  A description of the
       project, information about reporting bugs, and the latest version of this page, can  be  found
       at https://www.kernel.org/doc/man-pages/.

Linux                                         2017-09-15                                    SIGNAL(2)
